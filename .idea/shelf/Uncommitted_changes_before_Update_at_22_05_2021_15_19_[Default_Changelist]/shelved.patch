Index: app/src/main/res/layout/activity_tablero.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".TableroActivity\">\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/constraintLayout4\"\r\n        android:layout_width=\"89dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"34dp\"\r\n        android:layout_marginEnd=\"2dp\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/rvGamer\">\r\n\r\n        <Button\r\n            android:id=\"@+id/buttonPoner\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/play_card\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/buttonPedirUno\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/buttonPedirUno\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/app_name\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/buttonPoner\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/buttonRobarCarta\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/draw_card\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/buttonPedirUno\" />\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/game_menu\"\r\n        android:layout_width=\"44dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"2dp\"\r\n        android:layout_marginEnd=\"2dp\"\r\n        android:onClick=\"showMenu\"\r\n        android:src=\"@drawable/menu_icon\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        android:contentDescription=\"@string/img\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/rvCard\"\r\n        android:layout_width=\"332dp\"\r\n        android:layout_height=\"117dp\"\r\n        android:layout_marginStart=\"26dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/rvGamer\"\r\n        android:layout_width=\"301dp\"\r\n        android:layout_height=\"157dp\"\r\n        android:layout_marginStart=\"16dp\"\r\n        android:layout_marginTop=\"16dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/constraintLayout5\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"center\"\r\n        android:layout_marginTop=\"68dp\"\r\n        android:layout_marginEnd=\"72dp\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/constraintLayout4\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/rvGamer\">\r\n\r\n        <ImageView\r\n            android:id=\"@+id/image_cima\"\r\n            android:layout_width=\"65dp\"\r\n            android:layout_height=\"80dp\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/image_record\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            android:contentDescription=\"@string/img\" />\r\n\r\n        <ImageView\r\n            android:id=\"@+id/image_record\"\r\n            android:layout_width=\"65dp\"\r\n            android:layout_height=\"80dp\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/textView7\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/image_cima\"\r\n            android:contentDescription=\"@string/img\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/textView7\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/chosen_card\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/image_record\" />\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/constraintLayout6\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"center\"\r\n        android:layout_marginStart=\"5dp\"\r\n        android:layout_marginBottom=\"42dp\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/rvCard\"\r\n        app:layout_constraintStart_toStartOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/your_cards\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"3dp\"\r\n            android:text=\"\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/your_turn\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/your_turn\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"3dp\"\r\n            android:text=\"\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/your_cards\"\r\n            app:layout_constraintStart_toStartOf=\"parent\" />\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_tablero.xml	(revision 93d5f2f6fa983dbcc3f41d57ffb89aa4a923e253)
+++ app/src/main/res/layout/activity_tablero.xml	(date 1621689551135)
@@ -55,9 +55,9 @@
 
     <androidx.recyclerview.widget.RecyclerView
         android:id="@+id/rvCard"
-        android:layout_width="332dp"
-        android:layout_height="117dp"
-        android:layout_marginStart="26dp"
+        android:layout_width="326dp"
+        android:layout_height="155dp"
+        android:layout_marginStart="28dp"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintStart_toStartOf="parent" />
 
@@ -136,6 +136,4 @@
             app:layout_constraintBottom_toTopOf="@+id/your_cards"
             app:layout_constraintStart_toStartOf="parent" />
     </androidx.constraintlayout.widget.ConstraintLayout>
-
-
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/eina/unizar/unozar/ChangeAvatar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eina.unizar.unozar\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Toast\r\nimport kotlinx.android.synthetic.main.activity_change_avatar.*\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport server.request.UnlockRequest\r\nimport server.response.TokenResponse\r\n\r\nclass ChangeAvatar : AppCompatActivity() {\r\n\r\n    private lateinit var session: String\r\n    private var avatarId = 0\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        session = intent.getStringExtra(\"session\").toString()\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_change_avatar)\r\n        /*imageButton.setOnClickListener{\r\n            nameAvatar = \"oso\"\r\n            cambiarAvatar(nameAvatar)\r\n        }\r\n        imageButton2.setOnClickListener{\r\n            nameAvatar = \"castor\"\r\n            cambiarAvatar(nameAvatar)\r\n        }\r\n        imageButton3.setOnClickListener{\r\n            nameAvatar = \"larry\"\r\n            cambiarAvatar(nameAvatar)\r\n        }\r\n        imageButton4.setOnClickListener{\r\n            nameAvatar = \"jesica\"\r\n            cambiarAvatar(nameAvatar)\r\n        }*/\r\n        RetrofitClient.instance.unlockAvatar(UnlockRequest(avatarId, session))\r\n            .enqueue(object : Callback<TokenResponse> {\r\n                override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                    Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_LONG).show()\r\n                } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                    if (response.code() == 200) {\r\n                        val intent = Intent().apply { putExtra(\"session\", response.body()!!.token) }\r\n                        setResult(Activity.RESULT_OK, intent)\r\n                        Toast.makeText(applicationContext, getString(R.string.avatar_change_success), Toast.LENGTH_LONG).show()\r\n                        finish()\r\n                    } else {\r\n                        Toast.makeText(applicationContext, getString(R.string.bad_update_response) + response.code(), Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/eina/unizar/unozar/ChangeAvatar.kt	(revision 93d5f2f6fa983dbcc3f41d57ffb89aa4a923e253)
+++ app/src/main/java/eina/unizar/unozar/ChangeAvatar.kt	(date 1621689137523)
@@ -52,4 +52,4 @@
                 }
             })
     }
-}
\ No newline at end of file
+}
Index: app/src/main/java/eina/unizar/unozar/TableroActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eina.unizar.unozar\r\n\r\nimport adapter.CardAdapter\r\nimport adapter.GamerAdapter\r\nimport android.app.Activity\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.MenuInflater\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.PopupMenu\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport data.Card\r\nimport data.Gamer\r\nimport kotlinx.android.synthetic.main.activity_tablero.*\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport server.request.PlayCardRequest\r\nimport server.request.TokenRequest\r\nimport server.response.GameInfoResponse\r\nimport server.response.TokenResponse\r\n\r\nvar posCambiado :Long = 0\r\nvar recordCambiado = false\r\nvar nombreRecordado = \"\"\r\nvar record = 0\r\n\r\nclass TableroActivity : AppCompatActivity() {\r\n\r\n    /*internal lateinit var timer : CountDownTimer\r\n    internal val initial: Long = 60000\r\n    internal val interval: Long = 1000*/\r\n    private lateinit var session: String\r\n    private lateinit var avatarIds: Array<String>\r\n    private var avatars = arrayListOf(\r\n        R.drawable.test_user,\r\n        R.drawable.robotia,\r\n        R.drawable.castor,\r\n        R.drawable.jesica,\r\n        R.drawable.larry,\r\n        R.drawable.oso\r\n    )\r\n    private var myPos: Int = 5\r\n    private var turn: Int = 5\r\n    private var finished = false\r\n    private var winner = 0\r\n    private var gone = false\r\n    private var done = true\r\n    private var pause = false\r\n    private var quit = false\r\n    private var ponerCarta = false\r\n\r\n    private fun traductorCartasToInt(carta: String): Int {\r\n        if(carta[1] == 'R') {\r\n            if(carta[2] == 'X') {\r\n                if(carta[0] == '0') { return R.drawable.cero_rojo }\r\n                if(carta[0] == '1') { return R.drawable.uno_rojo }\r\n                if(carta[0] == '2') { return R.drawable.dos_rojo }\r\n                if(carta[0] == '3') { return R.drawable.tres_rojo }\r\n                if(carta[0] == '4') { return R.drawable.cuatro_rojo }\r\n                if(carta[0] == '5') { return R.drawable.cinco_rojo }\r\n                if(carta[0] == '6') { return R.drawable.seis_rojo }\r\n                if(carta[0] == '7') { return R.drawable.siete_rojo }\r\n                if(carta[0] == '8') { return R.drawable.ocho_rojo }\r\n                if(carta[0] == '9') { return R.drawable.nueve_rojo }\r\n            }\r\n            else if(carta[2] == 'S') { return R.drawable.saltar_turno_rojo }\r\n            else if(carta[2] == '2') { return R.drawable.mas_dos_rojo }\r\n            else if(carta[2] == 'C') { return R.drawable.cambio_color_rojo }\r\n            else if(carta[2] == '4') { return R.drawable.mas_cuatro_rojo }\r\n            else if(carta[2] == 'R') {return R.drawable.cambio_sentido_rojo }\r\n            //else { return 0 }\r\n        }\r\n        else if(carta[1] == 'Y') {\r\n            if(carta[2] == 'X') {\r\n                if(carta[0] == '0') { return R.drawable.cero_amarillo }\r\n                if(carta[0] == '1') { return R.drawable.uno_amarillo }\r\n                if(carta[0] == '2') { return R.drawable.dos_amarillo }\r\n                if(carta[0] == '3') { return R.drawable.tres_amarillo }\r\n                if(carta[0] == '4') { return R.drawable.cuatro_amarillo }\r\n                if(carta[0] == '5') { return R.drawable.cinco_amarillo }\r\n                if(carta[0] == '6') { return R.drawable.seis_amarillo }\r\n                if(carta[0] == '7') { return R.drawable.siete_amarillo }\r\n                if(carta[0] == '8') { return R.drawable.ocho_amarillo }\r\n                if(carta[0] == '9') { return R.drawable.nueve_amarillo }\r\n            }\r\n            else if(carta[2] == 'S') { return R.drawable.saltar_turno_amarillo }\r\n            else if(carta[2] == '2') { return R.drawable.mas_dos_amarillo }\r\n            else if(carta[2] == 'C') { return R.drawable.cambio_color_amarillo }\r\n            else if(carta[2] == '4') { return R.drawable.mas_cuatro_amarillo }\r\n            else if(carta[2] == 'R') {return R.drawable.cambio_sentido_amarillo }\r\n            //else{return 0}\r\n        }\r\n        else if(carta[1] == 'B') {\r\n            if(carta[2] == 'X') {\r\n                if(carta[0] == '0') { return R.drawable.cero_azul }\r\n                if(carta[0] == '1') { return R.drawable.uno_azul }\r\n                if(carta[0] == '2') { return R.drawable.dos_azul }\r\n                if(carta[0] == '3') { return R.drawable.tres_azul }\r\n                if(carta[0] == '4') { return R.drawable.cuatro_azul }\r\n                if(carta[0] == '5') { return R.drawable.cinco_azul }\r\n                if(carta[0] == '6') { return R.drawable.seis_azul }\r\n                if(carta[0] == '7') { return R.drawable.siete_azul }\r\n                if(carta[0] == '8') { return R.drawable.ocho_azul }\r\n                if(carta[0] == '9') { return R.drawable.nueve_azul }\r\n            }\r\n            else if(carta[2] == 'S') {return R.drawable.saltar_turno_azul }\r\n            else if(carta[2] == '2') {return R.drawable.mas_dos_azul }\r\n            else if(carta[2] == 'C') {return R.drawable.cambio_color_azul }\r\n            else if(carta[2] == '4') {return R.drawable.mas_cuatro_azul }\r\n            else if(carta[2] == 'R') {return R.drawable.cambio_sentido_azul }\r\n            //else { return 0 }\r\n        }\r\n        else if(carta[1] == 'G') {\r\n            if(carta[2] == 'X') {\r\n                if(carta[0] == '0') { return R.drawable.cero_verde }\r\n                if(carta[0] == '1') { return R.drawable.uno_verde }\r\n                if(carta[0] == '2') { return R.drawable.dos_verde }\r\n                if(carta[0] == '3') { return R.drawable.tres_verde }\r\n                if(carta[0] == '4') { return R.drawable.cuatro_verde }\r\n                if(carta[0] == '5') { return R.drawable.cinco_verde }\r\n                if(carta[0] == '6') { return R.drawable.seis_verde }\r\n                if(carta[0] == '7') { return R.drawable.siete_verde }\r\n                if(carta[0] == '8') { return R.drawable.ocho_verde }\r\n                if(carta[0] == '9') { return R.drawable.nueve_verde }\r\n            }\r\n            else if(carta[2] == 'S') { return R.drawable.saltar_turno_verde }\r\n            else if(carta[2] == '2') { return R.drawable.mas_dos_verde }\r\n            else if(carta[2] == 'C') { return R.drawable.cambio_color_verde }\r\n            else if(carta[2] == '4') { return R.drawable.mas_cuatro_verde }\r\n            else if(carta[2] == 'R') {return R.drawable.cambio_sentido_verde }\r\n            //else { return 0 }\r\n        }\r\n        else if((carta[0] == 'X') && (carta[1] == 'X')) {\r\n            if(carta[2] == 'C') { return R.drawable.cambio_color_base }\r\n            else if(carta[2] == '4') { return R.drawable.mas_cuatro_base }\r\n            //else { return 0 }\r\n        }\r\n        Toast.makeText(applicationContext, \"La carta no existe\", Toast.LENGTH_SHORT).show()\r\n        return R.drawable.cambio_color_verde\r\n    }\r\n\r\n    private val cards = mutableListOf<Card>()\r\n    private val gamers = mutableListOf<Gamer>()\r\n\r\n    private var cimaActual = \"\"\r\n    private var cimaCambiada = false\r\n    private var cimaNueva = \"\"\r\n\r\n    var robadaCarta = false\r\n    //var cartaAnadida = false\r\n\r\n    var miTurno = true\r\n\r\n    fun comprobarCima() {\r\n        if(cimaActual.isEmpty()) {\r\n            cimaCambiada = true\r\n        }\r\n        else{\r\n            if (cimaActual != cimaNueva) {\r\n                cimaCambiada = true\r\n                cimaActual = cimaNueva\r\n            }\r\n        }\r\n    }\r\n\r\n    fun cambiarCima() {\r\n        cimaActual = cimaNueva\r\n        image_cima.setImageResource(traductorCartasToInt(cimaActual))\r\n    }\r\n\r\n    val manoActual = mutableListOf<String>()\r\n    private var manoCambiada = false\r\n    private lateinit var manoNueva : Array<String>\r\n\r\n    fun comprobarManoNueva() {\r\n        if(manoActual.size == 0 && (manoNueva.isNotEmpty())) { manoCambiada = true }\r\n        else{\r\n            if((manoActual.size < manoNueva.size) || (manoActual.size > manoNueva.size)) {\r\n                manoCambiada = true\r\n            }\r\n            else { //La manoActual y la nueva tienen el mismo tamaño\r\n                var i = 0\r\n                while ((i < manoActual.size) && !manoCambiada) {\r\n                    if ((manoActual[i]) != manoNueva[i]) { manoCambiada = true }\r\n                    i++\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun cambiarMano() {\r\n        manoActual.removeAll(manoActual)\r\n        val tamano = manoNueva.size -1\r\n        for(i in 0..tamano) { manoActual.add(manoNueva[i]) }\r\n    }\r\n\r\n    private val jugadoresActuales = mutableListOf<String>()\r\n    var jugadoresCambiados = false\r\n    private lateinit var jugadoresNuevos : Array<String>\r\n\r\n    lateinit var idJugadoresActuales : Array<String>\r\n    lateinit var idJugadoresNuevos : Array<String>\r\n    private lateinit var idJugadoresCambiados : Array<Boolean>\r\n\r\n    fun comprobarIdsJugadores() {\r\n        var i = 0\r\n        var cont = 0\r\n        while (i < idJugadoresActuales.size) {\r\n             if (!(idJugadoresActuales[i]).equals(idJugadoresNuevos[i])) {\r\n                 cont++\r\n                 idJugadoresCambiados[i] = true\r\n             }\r\n             i++\r\n        }\r\n        if(cont > 0){\r\n            jugadoresCambiados = true\r\n        }\r\n    }\r\n\r\n    fun cambiarJugadoresYCartas() {\r\n        jugadoresActuales.removeAll(jugadoresActuales)\r\n        for(i in jugadoresNuevos.indices) {\r\n            if(!idJugadoresCambiados[i]) {\r\n                jugadoresActuales.add(jugadoresNuevos[i])\r\n            }\r\n            else{\r\n                jugadoresActuales.add(\"IA\")\r\n            }\r\n        }\r\n        numCartasJugadoresActuales.removeAll(numCartasJugadoresActuales)\r\n        //tamano = numCartasJugadoresNuevos.size -1\r\n        for(i in numCartasJugadoresNuevos.indices) {\r\n            numCartasJugadoresActuales.add(numCartasJugadoresNuevos[i])\r\n        }\r\n    }\r\n\r\n    private val numCartasJugadoresActuales  = mutableListOf<Int>()\r\n    var numCartasJugadoresCambiados = false\r\n    lateinit var numCartasJugadoresNuevos : Array<Int>\r\n    //lateinit var imgJugadores : Array<Int>\r\n\r\n    fun comprobarCartasJugadores() {\r\n        if(numCartasJugadoresActuales.size == 0) {\r\n            numCartasJugadoresCambiados = true\r\n        }\r\n        else {\r\n            var i = 0\r\n            while ((i < numCartasJugadoresActuales.size) && !numCartasJugadoresCambiados) {\r\n                if (numCartasJugadoresActuales[i] == 0) {\r\n                    finished = true\r\n                    winner = i\r\n                }\r\n                if (numCartasJugadoresActuales[i] != numCartasJugadoresNuevos[i]) {\r\n                    numCartasJugadoresCambiados = true\r\n                }\r\n                i++\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_tablero)\r\n        session = intent.getStringExtra(\"session\").toString()\r\n\r\n        //Pasar nombres de jugadores desde la anterior actividad\r\n        idJugadoresCambiados = arrayOf(false,false,false,false)\r\n        idJugadoresActuales = intent.getStringArrayExtra(\"ids\")!!\r\n        idJugadoresNuevos = intent.getStringArrayExtra(\"ids\")!!\r\n        myPos = intent.getIntExtra(\"myPosition\", 0)\r\n        avatarIds = intent.getStringArrayExtra(\"avatars\")!!\r\n        jugadoresNuevos = intent.getStringArrayExtra(\"names\")!!\r\n        //jugadoresNuevos = arrayOf(\"Gonzalo\", \"Alberto\")\r\n        //Toast.makeText(applicationContext, \"Mi posición: $myPos\", Toast.LENGTH_SHORT).show()\r\n        //imgJugadores =\r\n\r\n        actualizar()\r\n\r\n        /* Tiempo de turno */\r\n        /*timer = object: CountDownTimer(initial, interval) {\r\n            override fun onTick(millisUntilFinished: Long) {\r\n                val timeLeft = millisUntilFinished / 1000\r\n                //timerText.text = getString(R.string.time_left, timeLeft.toString())\r\n            }\r\n            override fun onFinish() {\r\n                //\r\n            }\r\n        }\r\n*/\r\n        buttonPoner.setOnClickListener {\r\n            if(miTurno && !cartaPuesta) ponerCarta()\r\n        }\r\n        buttonPedirUno.setOnClickListener{\r\n            if(miTurno) {\r\n                if (manoActual.size == 2) {\r\n                    haDichoUnozar = true\r\n                    Toast.makeText(applicationContext, \"UNOZAR\", Toast.LENGTH_SHORT).show()\r\n                } else {\r\n                    Toast.makeText(applicationContext, \"No puedes\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n        buttonRobarCarta.setOnClickListener{\r\n            if(miTurno && !robadaCarta) pedirRobada = true\r\n        }\r\n    }\r\n\r\n    private var haDichoUnozar = false\r\n\r\n    private var pedirRobada = false\r\n\r\n    private var cartaPuesta = false\r\n\r\n    private lateinit var colorSelected: String\r\n    private fun ponerCarta() {\r\n        colorSelected = \"Y\"\r\n        //Si es una +4 o un cambia color\r\n        if(nombreRecordado.equals(\"XXC\") || nombreRecordado.equals(\"XX4\")) {\r\n            val builder = AlertDialog.Builder(this)\r\n            val items = arrayOf(\"Red\", \"Green\", \"Yellow\", \"Blue\")\r\n            with(builder)\r\n            {\r\n                setTitle(\"Elija un color\")\r\n                setItems(items) { _, which ->\r\n                    //Poner carta\r\n                    Toast.makeText(applicationContext, items[which] + \" is clicked\", Toast.LENGTH_SHORT).show()\r\n                    if(items[which].equals(\"Red\") && nombreRecordado == \"XXC\") {\r\n                        nombreRecordado = \"XRC\"\r\n                        colorSelected = \"R\"\r\n                        ponerCarta = true\r\n                    }\r\n                    else if(items[which].equals(\"Green\") && nombreRecordado == \"XXC\") {\r\n                        nombreRecordado = \"XGC\"\r\n                        colorSelected = \"G\"\r\n                        ponerCarta = true\r\n                    }\r\n                    else if(items[which].equals(\"Blue\") && nombreRecordado == \"XXC\") {\r\n                        nombreRecordado = \"XBC\"\r\n                        colorSelected = \"B\"\r\n                        ponerCarta = true\r\n                    }\r\n                    else if(items[which].equals(\"Yellow\") && nombreRecordado == \"XXC\") {\r\n                        nombreRecordado = \"XYC\"\r\n                        colorSelected = \"Y\"\r\n                        ponerCarta = true\r\n                    }\r\n                    else if(items[which].equals(\"Red\") && nombreRecordado == \"XX4\") {\r\n                        nombreRecordado = \"XR4\"\r\n                        colorSelected = \"R\"\r\n                    }\r\n                    else if(items[which].equals(\"Green\") && nombreRecordado == \"XX4\") {\r\n                        nombreRecordado = \"XG4\"\r\n                        colorSelected = \"G\"\r\n                        ponerCarta = true\r\n                    }\r\n                    else if(items[which].equals(\"Blue\") && nombreRecordado == \"XX4\") {\r\n                        nombreRecordado = \"XB4\"\r\n                        colorSelected = \"B\"\r\n                        ponerCarta = true\r\n                    }\r\n                    else if(items[which].equals(\"Yellow\") && nombreRecordado == \"XX4\") {\r\n                        nombreRecordado = \"XY4\"\r\n                        colorSelected = \"Y\"\r\n                        ponerCarta = true\r\n                    }\r\n                }\r\n                show()\r\n            }\r\n        }\r\n        else{ponerCarta = true}\r\n    }\r\n\r\n    private fun anyadirCartas() {\r\n        cards.clear()\r\n        val tamano = manoActual.size - 1\r\n        cards.add(Card(1, \"inicio\", R.drawable.inicio))\r\n        for(i in 0..tamano) {\r\n            cards.add(Card(i.toLong(), manoActual[i], traductorCartasToInt(manoActual[i])))\r\n        }\r\n        cards.add(Card(1, \"fin\", R.drawable.fin))\r\n\r\n        rvCard.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        //var adapter = CardAdapter(Cards)\r\n        rvCard.apply{\r\n            adapter = CardAdapter(cards)\r\n        }\r\n    }\r\n\r\n    fun anyadirGamers() {\r\n        gamers.clear()\r\n        for(i in idJugadoresActuales.indices) {\r\n            var turno = \"\"\r\n            if (!(idJugadoresActuales[i].equals(session.substring(0,32)))) {\r\n                if (i == turn) turno = \"Su turno\"\r\n                if((jugadoresActuales[i]).equals(\"IA\")){\r\n                    gamers.add(Gamer(i.toLong(), avatars[avatarIds[i].toInt()], jugadoresActuales[i], turno, numCartasJugadoresActuales[i].toString() + \"  Cartas\"))\r\n                }\r\n                else{\r\n                    gamers.add(Gamer(i.toLong(), avatars[avatarIds[i].toInt()], jugadoresActuales[i], turno, numCartasJugadoresActuales[i].toString() + \"  Cartas\"))\r\n                }\r\n            }\r\n\r\n        }\r\n        rvGamer.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        val adapter = GamerAdapter(gamers)\r\n        rvGamer.adapter = adapter\r\n    }\r\n\r\n    private fun actualizar() {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            while(!finished && !gone) {\r\n                if(pedirRobada && done) {\r\n                    pedirRobada = false\r\n                    done = false\r\n                    //Pedir robar carta al servidor\r\n                    RetrofitClient.instance.draw(TokenRequest(session))\r\n                        .enqueue(object : Callback<TokenResponse> {\r\n                            override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                                Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_SHORT).show()\r\n                            } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                                if (response.code() == 200) {\r\n                                    session = response.body()?.token.toString()\r\n                                    Toast.makeText(applicationContext, \"Carta robada\", Toast.LENGTH_SHORT).show()\r\n                                    robadaCarta = true\r\n                                    done = true\r\n                                } else {\r\n                                    Toast.makeText(applicationContext, response.code(), Toast.LENGTH_SHORT).show()\r\n                                    done = true\r\n                                }\r\n                            }\r\n                        })\r\n                } else if(ponerCarta && done) {\r\n                    ponerCarta = false\r\n                    done = false\r\n                    //Mandar carta al servidor\r\n                    RetrofitClient.instance.playCard(PlayCardRequest(session, posCambiado.toInt(), haDichoUnozar, colorSelected))\r\n                        .enqueue(object : Callback<TokenResponse> {\r\n                            override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                                Toast.makeText(applicationContext, \"El servidor no responde\", Toast.LENGTH_SHORT).show()\r\n                            } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                                if (response.code() == 200) {\r\n                                    session = response.body()?.token.toString()\r\n                                    haDichoUnozar = false\r\n                                    Toast.makeText(applicationContext, \"Carta puesta\", Toast.LENGTH_SHORT).show()\r\n                                    nombreRecordado = \"\"\r\n                                    record = 0\r\n                                    recordCambiado = true\r\n                                    done = true\r\n                                } else {\r\n                                    Toast.makeText(applicationContext, \"Quizás se haya caido el servidor\", Toast.LENGTH_SHORT).show()\r\n                                    done = true\r\n                                }\r\n                            }\r\n                        })\r\n                } else if(pause && done) {\r\n                    pause = false\r\n                    done = false\r\n                    //Pedir robar carta al servidor\r\n                    RetrofitClient.instance.pause(TokenRequest(session))\r\n                        .enqueue(object : Callback<TokenResponse> {\r\n                            override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                                Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_SHORT).show()\r\n                            } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                                if (response.code() == 200) {\r\n                                    session = response.body()?.token.toString()\r\n                                    Toast.makeText(applicationContext, \"Pausa\", Toast.LENGTH_SHORT).show()\r\n                                    done = true\r\n                                } else {\r\n                                    Toast.makeText(applicationContext, response.code(), Toast.LENGTH_SHORT).show()\r\n                                    done = true\r\n                                }\r\n                            }\r\n                        })\r\n                } else if(quit && done) {\r\n                    quit = false\r\n                    done = false\r\n                    //Pedir robar carta al servidor\r\n                    RetrofitClient.instance.quitMatch(TokenRequest(session))\r\n                        .enqueue(object : Callback<TokenResponse> {\r\n                            override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                                Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_SHORT).show()\r\n                            } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                                if (response.code() == 200) {\r\n                                    session = response.body()?.token.toString()\r\n                                    gone = true\r\n                                    Toast.makeText(applicationContext, getString(R.string.quit_game_success), Toast.LENGTH_SHORT).show()\r\n                                    val intent = Intent().apply { putExtra(\"session\", response.body()!!.token) }\r\n                                    setResult(Activity.RESULT_OK, intent)\r\n                                    finish()\r\n                                } else {\r\n                                    Toast.makeText(applicationContext, getString(R.string.bad_quit_response), Toast.LENGTH_SHORT).show()\r\n                                    done = true\r\n                                }\r\n                            }\r\n                        })\r\n                } else if(done) {\r\n                    done = false\r\n                    RetrofitClient.instance.readGame(TokenRequest(session))\r\n                        .enqueue(object : Callback<GameInfoResponse> {\r\n                            override fun onFailure(call: Call<GameInfoResponse>, t: Throwable) {\r\n                                Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_SHORT).show()\r\n                            } override fun onResponse(call: Call<GameInfoResponse>, response: Response<GameInfoResponse>) {\r\n                                if (response.code() == 200) {\r\n                                    session = response.body()?.token.toString()\r\n                                    for (i in response.body()!!.playersNumCards.indices) {\r\n                                        if (response.body()!!.playersNumCards[i] == 0) {\r\n                                            finished = true\r\n                                            winner = i\r\n                                        }\r\n                                    }\r\n                                    //val prevTurn = turn\r\n                                    turn = response.body()!!.turn\r\n                                    /*** Players info ***/\r\n                                    miTurno = response.body()!!.turn == myPos\r\n\r\n                                    if (miTurno) {\r\n                                        runOnUiThread { your_turn.text = getString(R.string.your_turn) }\r\n                                    } else {\r\n                                        runOnUiThread { your_turn.text = getString(R.string.not_your_turn) }\r\n                                        //Reiniciar variables porque ya no es tu turno\r\n                                        robadaCarta = false\r\n                                    }\r\n\r\n                                    manoNueva = response.body()!!.playerCards\r\n                                    comprobarManoNueva()\r\n                                    if (manoCambiada) {\r\n                                        cambiarMano()\r\n                                        your_cards.text =getString(R.string.your_cards, manoActual.size.toString())\r\n                                        runOnUiThread { anyadirCartas() }\r\n                                        manoCambiada = false\r\n                                    }\r\n\r\n                                    idJugadoresNuevos = response.body()!!.playersIds\r\n                                    numCartasJugadoresNuevos = response.body()!!.playersNumCards\r\n                                    comprobarIdsJugadores()\r\n                                    comprobarCartasJugadores()\r\n                                    if (jugadoresCambiados || numCartasJugadoresCambiados) {\r\n                                        cambiarJugadoresYCartas()\r\n                                        runOnUiThread { anyadirGamers() }\r\n                                        jugadoresCambiados = false\r\n                                        numCartasJugadoresCambiados = false\r\n                                    }\r\n\r\n                                    cimaNueva = response.body()!!.topDiscard\r\n                                    comprobarCima()\r\n                                    if (cimaCambiada) {\r\n                                        runOnUiThread { cambiarCima() }\r\n                                        cimaCambiada = false\r\n                                    }\r\n\r\n                                    if (recordCambiado) {\r\n                                        runOnUiThread { image_record.setImageResource(record) }\r\n                                        recordCambiado = false\r\n                                    }\r\n\r\n                                    /*if (prevTurn != turn) {  // Cambio de turno\r\n                                        timer.cancel()\r\n                                        timer.start()\r\n                                    }*/\r\n                                    done = true\r\n                                } else {\r\n                                    Toast.makeText(applicationContext, response.code(), Toast.LENGTH_SHORT).show()\r\n                                    done = true\r\n                                }\r\n                            }\r\n                        })\r\n                    delay(2000)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun showMenu(v : View){\r\n        val popup = PopupMenu(this, v)\r\n        val inflater: MenuInflater = popup.menuInflater\r\n        inflater.inflate(R.menu.game_menu, popup.menu)\r\n        popup.setOnMenuItemClickListener { menuItem ->\r\n            when(menuItem.itemId){\r\n                R.id.pause-> if(miTurno) pause = true\r\n                R.id.exit-> quit = true\r\n            }\r\n            true\r\n        }\r\n        popup.show()\r\n    }\r\n\r\n    /*private val PAUSE_ID = Menu.FIRST\r\n    private val EXIT_ID = Menu.FIRST + 1\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val result = super.onCreateOptionsMenu(menu)\r\n        menu.add(Menu.NONE, PAUSE_ID, Menu.NONE, \"Pausar Partida\")\r\n        menu.add(Menu.NONE, EXIT_ID, Menu.NONE, \"Salir de Partida\")\r\n        return result\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            PAUSE_ID -> { return true }\r\n            EXIT_ID -> {\r\n                RetrofitClient.instance.quitMatch(TokenRequest(session))\r\n                    .enqueue(object : Callback<TokenResponse> {\r\n                        override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                            Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_SHORT).show()\r\n                        } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                            if (response.code() == 200) {\r\n                                session = response.body()?.token.toString()\r\n                                Toast.makeText(applicationContext, getString(R.string.quit_game_success), Toast.LENGTH_SHORT).show()\r\n                                val intent = Intent().apply { putExtra(\"session\", response.body()!!.token) }\r\n                                setResult(Activity.RESULT_OK, intent)\r\n                                finish()\r\n                            } else {\r\n                                Toast.makeText(applicationContext, getString(R.string.bad_quit_response), Toast.LENGTH_SHORT).show()\r\n                            }\r\n                        }\r\n                    })\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }*/\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        if (!gone) {\r\n            if (finished) {\r\n                val builder = AlertDialog.Builder(this@TableroActivity)\r\n                var mensaje = \"DERROTA\"\r\n                if(winner == 0) mensaje = \"¡¡VICTORIA!!\"\r\n                builder.setTitle(mensaje)\r\n                builder.setPositiveButton(\"Volver\") { _: DialogInterface, _: Int -> finish() }\r\n                builder.show()\r\n            }\r\n            gone = true\r\n            RetrofitClient.instance.quitMatch(TokenRequest(session))\r\n                .enqueue(object : Callback<TokenResponse> {\r\n                    override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                        Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_SHORT).show()\r\n                    } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                        if (response.code() == 200) {\r\n                            session = response.body()?.token.toString()\r\n                            Toast.makeText(applicationContext, getString(R.string.quit_game_success), Toast.LENGTH_SHORT).show()\r\n                            val intent = Intent().apply { putExtra(\"session\", session) }\r\n                            setResult(Activity.RESULT_OK, intent)\r\n                        } else {\r\n                            Toast.makeText(applicationContext, getString(R.string.bad_quit_response), Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/eina/unizar/unozar/TableroActivity.kt	(revision 93d5f2f6fa983dbcc3f41d57ffb89aa4a923e253)
+++ app/src/main/java/eina/unizar/unozar/TableroActivity.kt	(date 1621688946284)
@@ -246,7 +246,6 @@
     private val numCartasJugadoresActuales  = mutableListOf<Int>()
     var numCartasJugadoresCambiados = false
     lateinit var numCartasJugadoresNuevos : Array<Int>
-    //lateinit var imgJugadores : Array<Int>
 
     fun comprobarCartasJugadores() {
         if(numCartasJugadoresActuales.size == 0) {
@@ -279,9 +278,6 @@
         myPos = intent.getIntExtra("myPosition", 0)
         avatarIds = intent.getStringArrayExtra("avatars")!!
         jugadoresNuevos = intent.getStringArrayExtra("names")!!
-        //jugadoresNuevos = arrayOf("Gonzalo", "Alberto")
-        //Toast.makeText(applicationContext, "Mi posición: $myPos", Toast.LENGTH_SHORT).show()
-        //imgJugadores =
 
         actualizar()
 
@@ -376,7 +372,7 @@
                 show()
             }
         }
-        else{ponerCarta = true}
+        else { ponerCarta = true }
     }
 
     private fun anyadirCartas() {
Index: app/src/main/res/drawable-anydpi-v24/edit_alias.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:width=\"24dp\"\r\n    android:height=\"24dp\"\r\n    android:viewportWidth=\"24\"\r\n    android:viewportHeight=\"24\"\r\n    android:tint=\"#000000\">\r\n  <group android:scaleX=\"0.92\"\r\n      android:scaleY=\"0.92\"\r\n      android:translateX=\"0.96\"\r\n      android:translateY=\"0.96\">\r\n    <path\r\n        android:fillColor=\"@android:color/white\"\r\n        android:pathData=\"M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z\"/>\r\n  </group>\r\n</vector>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-anydpi-v24/edit_alias.xml	(revision 93d5f2f6fa983dbcc3f41d57ffb89aa4a923e253)
+++ app/src/main/res/drawable-anydpi-v24/edit_alias.xml	(date 1621672646575)
@@ -3,7 +3,8 @@
     android:height="24dp"
     android:viewportWidth="24"
     android:viewportHeight="24"
-    android:tint="#000000">
+    android:tint="#333333"
+    android:alpha="0.6">
   <group android:scaleX="0.92"
       android:scaleY="0.92"
       android:translateX="0.96"
