Index: app/src/main/java/eina/unizar/unozar/TableroActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eina.unizar.unozar\r\n\r\nimport adapter.CardAdapter\r\nimport adapter.GamerAdapter\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport data.Card\r\nimport data.FriendInfo\r\nimport data.Gamer\r\nimport kotlinx.android.synthetic.main.activity_tablero.*\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport server.request.PlayCardRequest\r\nimport server.request.TokenRequest\r\nimport server.response.GameInfoResponse\r\nimport server.response.TokenResponse\r\n\r\nvar recordCambiado = 0\r\nvar nombreRecordado = \"\"\r\nvar record = 0\r\n\r\nclass TableroActivity : AppCompatActivity(){\r\n\r\n    private lateinit var session: String\r\n    private var finished = false\r\n    private var myTurn = true\r\n    private val cardsList = listOf(\r\n        Card(1, \"inicio\", R.drawable.inicio),\r\n        Card(1, \"cambio_color_base\", R.drawable.cambio_color_base),\r\n        Card(1, \"dos_rojo\", R.drawable.dos_rojo),\r\n        Card(1, \"Carta negado amarillo\", R.drawable.dos_verde),\r\n        Card(1, \"mas_cuatro_base\", R.drawable.mas_cuatro_base),\r\n        Card(1, \"ocho_azul\", R.drawable.ocho_azul),\r\n        Card(1, \"cinco_azul\", R.drawable.cinco_azul),\r\n        Card(1, \"dos_azul\", R.drawable.dos_azul),\r\n        Card(1, \"fin\", R.drawable.fin)\r\n    )\r\n\r\n    private lateinit var gamersList: ArrayList<Gamer>\r\n    //private val gamersList = Array<Gamer>()\r\n\r\n    fun traductorCartasToInt(carta: String): Int {\r\n        if(carta[1] == 'R') {\r\n            if(carta[2] == 'X') {\r\n                if(carta[0] == '0'){ return R.drawable.cero_rojo}\r\n                if(carta[0] == '1'){ return R.drawable.uno_rojo}\r\n                if(carta[0] == '2'){ return R.drawable.dos_rojo}\r\n                if(carta[0] == '3'){ return R.drawable.tres_rojo}\r\n                if(carta[0] == '4'){ return R.drawable.cuatro_rojo}\r\n                if(carta[0] == '5'){ return R.drawable.cinco_rojo}\r\n                if(carta[0] == '6'){ return R.drawable.seis_rojo}\r\n                if(carta[0] == '7'){ return R.drawable.siete_rojo}\r\n                if(carta[0] == '8'){ return R.drawable.ocho_rojo}\r\n                if(carta[0] == '9'){ return R.drawable.nueve_rojo}\r\n            }\r\n            else if(carta[2] == 'S'){return R.drawable.saltar_turno_rojo}\r\n            else if(carta[2] == '2') {return R.drawable.mas_dos_rojo}\r\n            else if(carta[2] == 'R') {return R.drawable.cambio_color_rojo}\r\n            else if(carta[2] == '4') {return R.drawable.mas_cuatro_rojo}\r\n            else{return 0}\r\n        }\r\n        else if(carta[1] == 'Y') {\r\n            if(carta[2] == 'X') {\r\n                if(carta[0] == '0'){ return R.drawable.cero_amarillo}\r\n                if(carta[0] == '1'){ return R.drawable.uno_amarillo}\r\n                if(carta[0] == '2'){ return R.drawable.dos_amarillo}\r\n                if(carta[0] == '3'){ return R.drawable.tres_amarillo}\r\n                if(carta[0] == '4'){ return R.drawable.cuatro_amarillo}\r\n                if(carta[0] == '5'){ return R.drawable.cinco_amarillo}\r\n                if(carta[0] == '6'){ return R.drawable.seis_amarillo}\r\n                if(carta[0] == '7'){ return R.drawable.siete_amarillo}\r\n                if(carta[0] == '8'){ return R.drawable.ocho_amarillo}\r\n                if(carta[0] == '9'){ return R.drawable.nueve_amarillo}\r\n            }\r\n            else if(carta[2] == 'S'){return R.drawable.saltar_turno_amarillo}\r\n            else if(carta[2] == '2') {return R.drawable.mas_dos_amarillo}\r\n            else if(carta[2] == 'R') {return R.drawable.cambio_color_amarillo}\r\n            else if(carta[2] == '4') {return R.drawable.mas_cuatro_amarillo}\r\n            else{return 0}\r\n        }\r\n        else if(carta[1] == 'B') {\r\n                if(carta[2] == 'X') {\r\n                    if(carta[0] == '0'){ return R.drawable.cero_azul}\r\n                    if(carta[0] == '1'){ return R.drawable.uno_azul}\r\n                    if(carta[0] == '2'){ return R.drawable.dos_azul}\r\n                    if(carta[0] == '3'){ return R.drawable.tres_azul}\r\n                    if(carta[0] == '4'){ return R.drawable.cuatro_azul}\r\n                    if(carta[0] == '5'){ return R.drawable.cinco_azul}\r\n                    if(carta[0] == '6'){ return R.drawable.seis_azul}\r\n                    if(carta[0] == '7'){ return R.drawable.siete_azul}\r\n                    if(carta[0] == '8'){ return R.drawable.ocho_azul}\r\n                    if(carta[0] == '9'){ return R.drawable.nueve_azul}\r\n                }\r\n                else if(carta[2] == 'S'){return R.drawable.saltar_turno_azul}\r\n                else if(carta[2] == '2') {return R.drawable.mas_dos_azul}\r\n                else if(carta[2] == 'R') {return R.drawable.cambio_color_azul}\r\n                else if(carta[2] == '4') {return R.drawable.mas_cuatro_azul}\r\n                else{return 0}\r\n            }\r\n        else if(carta[1] == 'G') {\r\n                if(carta[2] == 'X') {\r\n                    if(carta[0] == '0'){ return R.drawable.cero_verde}\r\n                    if(carta[0] == '1'){ return R.drawable.uno_verde}\r\n                    if(carta[0] == '2'){ return R.drawable.dos_verde}\r\n                    if(carta[0] == '3'){ return R.drawable.tres_verde}\r\n                    if(carta[0] == '4'){ return R.drawable.cuatro_verde}\r\n                    if(carta[0] == '5'){ return R.drawable.cinco_verde}\r\n                    if(carta[0] == '6'){ return R.drawable.seis_verde}\r\n                    if(carta[0] == '7'){ return R.drawable.siete_verde}\r\n                    if(carta[0] == '8'){ return R.drawable.ocho_verde}\r\n                    if(carta[0] == '9'){ return R.drawable.nueve_verde}\r\n                }\r\n                else if(carta[2] == 'S'){return R.drawable.saltar_turno_verde}\r\n                else if(carta[2] == '2') {return R.drawable.mas_dos_verde}\r\n                else if(carta[2] == 'R') {return R.drawable.cambio_color_verde}\r\n                else if(carta[2] == '4') {return R.drawable.mas_cuatro_verde}\r\n                else{return 0}\r\n        }\r\n        else if((carta[0] == 'X') && (carta[1] == 'X')) {\r\n            return when {\r\n                carta[2] == 'C' -> { R.drawable.cambio_color_base }\r\n                carta[2] == '4' -> { R.drawable.mas_cuatro_base }\r\n                else -> { 0 }\r\n            }\r\n        }\r\n        return 0\r\n    }\r\n\r\n    /*fun traductorCartasToString(carta: Int): String {\r\n        if(carta == R.drawable.cero_rojo){return \"0RX\"}\r\n        if(carta == R.drawable.uno_rojo){return \"1RX\"}\r\n        if(carta == R.drawable.dos_rojo){return \"2RX\"}\r\n        if(carta == R.drawable.tres_rojo){return \"3RX\"}\r\n        if(carta == R.drawable.cuatro_rojo){return \"4RX\"}\r\n        if(carta == R.drawable.cinco_rojo){return \"5RX\"}\r\n        if(carta == R.drawable.seis_rojo){return \"6RX\"}\r\n        if(carta == R.drawable.siete_rojo){return \"7RX\"}\r\n        if(carta == R.drawable.ocho_rojo){return \"8RX\"}\r\n        if(carta == R.drawable.nueve_rojo){return \"9RX\"}\r\n        if(carta == R.drawable.saltar_turno_rojo){return \"XRS\"}\r\n        if(carta == R.drawable.mas_dos_rojo){return \"XR2\"}\r\n        if(carta == R.drawable.cambio_color_rojo){return \"XRR\"}\r\n        if(carta == R.drawable.mas_cuatro_rojo){return \"XR4\"}\r\n\r\n        if(carta == R.drawable.cero_amarillo){return \"0AX\"}\r\n        if(carta == R.drawable.uno_amarillo){return \"1AX\"}\r\n        if(carta == R.drawable.dos_amarillo){return \"2AX\"}\r\n        if(carta == R.drawable.tres_amarillo){return \"3AX\"}\r\n        if(carta == R.drawable.cuatro_amarillo){return \"4AX\"}\r\n        if(carta == R.drawable.cinco_amarillo){return \"5AX\"}\r\n        if(carta == R.drawable.seis_amarillo){return \"6AX\"}\r\n        if(carta == R.drawable.siete_amarillo){return \"7AX\"}\r\n        if(carta == R.drawable.ocho_amarillo){return \"8AX\"}\r\n        if(carta == R.drawable.nueve_amarillo){return \"9AX\"}\r\n        if(carta == R.drawable.saltar_turno_amarillo){return \"XAS\"}\r\n        if(carta == R.drawable.mas_dos_amarillo){return \"XA2\"}\r\n        if(carta == R.drawable.cambio_color_amarillo){return \"XAR\"}\r\n        if(carta == R.drawable.mas_cuatro_amarillo){return \"XA4\"}\r\n\r\n        if(carta == R.drawable.cero_azul){return \"0BX\"}\r\n        if(carta == R.drawable.uno_azul){return \"1BX\"}\r\n        if(carta == R.drawable.dos_azul){return \"2BX\"}\r\n        if(carta == R.drawable.tres_azul){return \"3BX\"}\r\n        if(carta == R.drawable.cuatro_azul){return \"4BX\"}\r\n        if(carta == R.drawable.cinco_azul){return \"5BX\"}\r\n        if(carta == R.drawable.seis_azul){return \"6BX\"}\r\n        if(carta == R.drawable.siete_azul){return \"7BX\"}\r\n        if(carta == R.drawable.ocho_azul){return \"8BX\"}\r\n        if(carta == R.drawable.nueve_azul){return \"9BX\"}\r\n        if(carta == R.drawable.saltar_turno_azul){return \"XBS\"}\r\n        if(carta == R.drawable.mas_dos_azul){return \"XB2\"}\r\n        if(carta == R.drawable.cambio_color_azul){return \"XBR\"}\r\n        if(carta == R.drawable.mas_cuatro_azul){return \"XB4\"}\r\n\r\n        if(carta == R.drawable.cero_verde){return \"0GX\"}\r\n        if(carta == R.drawable.uno_verde){return \"1GX\"}\r\n        if(carta == R.drawable.dos_verde){return \"2GX\"}\r\n        if(carta == R.drawable.tres_verde){return \"3GX\"}\r\n        if(carta == R.drawable.cuatro_verde){return \"4GX\"}\r\n        if(carta == R.drawable.cinco_verde){return \"5GX\"}\r\n        if(carta == R.drawable.seis_verde){return \"6GX\"}\r\n        if(carta == R.drawable.siete_verde){return \"7GX\"}\r\n        if(carta == R.drawable.ocho_verde){return \"8GX\"}\r\n        if(carta == R.drawable.nueve_verde){return \"9GX\"}\r\n        if(carta == R.drawable.saltar_turno_verde){return \"XGS\"}\r\n        if(carta == R.drawable.mas_dos_verde){return \"XG2\"}\r\n        if(carta == R.drawable.cambio_color_verde){return \"XGR\"}\r\n        if(carta == R.drawable.mas_cuatro_verde){return \"XG4\"}\r\n\r\n        if(carta == R.drawable.cambio_color_base){return \"XXR\"}\r\n        if(carta == R.drawable.mas_cuatro_base){return \"XX4\"}\r\n        return \"\"\r\n    }*/\r\n\r\n    private val cards = mutableListOf<Card>()\r\n    val listaJugadores = mutableListOf<Gamer>()\r\n\r\n    private var cimaActual = 0\r\n    private var cimaCambiada = true\r\n    /*var cimaNueva = 0\r\n\r\n    val manoActual = mutableListOf<String>()\r\n    var manoCambiada = 0\r\n    val manoNueva = mutableListOf<String>()\r\n\r\n    val jugadoresActuales = mutableListOf<String>()\r\n    var jugadoresCambiados = 0\r\n    val jugadoresNuevos = mutableListOf<String>()\r\n\r\n    val numCartasJugadoresActuales  = mutableListOf<Int>()\r\n    var numCartasJugadoresCambiados = 0\r\n    val numCartasJugadoresNuevos  = mutableListOf<Int>()\r\n\r\n    var miTurno = 0\r\n\r\n    //var record = 0\r\n    var selectedCard = 0\r\n    */\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_tablero)\r\n        session = intent.getStringExtra(\"session\").toString()\r\n        //Picasso.get().load(R.drawable.cero_verde).into(R.id.image_record)\r\n\r\n        /*val imageView1 = findViewById<ImageView>(R.id.image_cima)\r\n        imageView1.setImageResource(cima)*/\r\n        /*val imageView2 = findViewById<ImageView>(R.id.image_record)\r\n        imageView2.setImageResource(record)*/\r\n        actualizarJuego()\r\n        actualizar()\r\n        //cambiarCima()\r\n        //val recicleView = findViewById<View>(R.id.rvCard) as Button\r\n        //val recordButton = findViewById<View>(R.id.recordarButton) as Button\r\n        recordarButton.setOnClickListener {\r\n            //val imageView = findViewById<ImageView>(R.id.image_record)\r\n            image_record.setImageResource(record)\r\n        }\r\n        /*val putButton = findViewById<View>(R.id.buttonPoner) as Button\r\n        val pedirUnoButton = findViewById<View>(R.id.buttonPedirUno) as Button\r\n        val robarButton = findViewById<View>(R.id.buttonRobarCarta) as Button\r\n        val pasarButton = findViewById<View>(R.id.buttonPasar) as Button\r\n        putButton.setOnClickListener {\r\n            ponerCarta()\r\n        }\r\n        pedirUnoButton.setOnClickListener{\r\n            pedirUno()\r\n        }\r\n        robarButton.setOnClickListener{\r\n            robarCarta()\r\n        }\r\n        pasarButton.setOnClickListener{\r\n            pasarTurno()\r\n        }*/\r\n    }\r\n\r\n    fun pedirUno(@Suppress(\"UNUSED_PARAMETER\")view: View){\r\n        //Pedir uno al servidor\r\n        /*RetrofitClient.instance.userPlayCard(PutCardRequest(/*Que tengo que enviar*/))\r\n            .enqueue(object : Callback<PutCardResponse> {\r\n                override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {\r\n                    Toast.makeText(applicationContext, \"El servidor no responde\", Toast.LENGTH_LONG).show()\r\n                } override fun onResponse(call: Call<RegisterResponse>, response: Response<RegisterResponse>) {\r\n                    if (response.code() == 200) {\r\n                        //Se ha pedido uno con éxito\r\n                    } else {\r\n                        Toast.makeText(applicationContext, \"Quizás se haya caido el servidor\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            })*/\r\n    }\r\n\r\n    fun robarCarta(@Suppress(\"UNUSED_PARAMETER\")view: View){\r\n        //Pedir robar carta al servidor\r\n        /*RetrofitClient.instance.userPlayCard(PutCardRequest(/*Que tengo que enviar*/))\r\n            .enqueue(object : Callback<PutCardResponse> {\r\n                override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {\r\n                    Toast.makeText(applicationContext, \"El servidor no responde\", Toast.LENGTH_LONG).show()\r\n                } override fun onResponse(call: Call<RegisterResponse>, response: Response<RegisterResponse>) {\r\n                    if (response.code() == 200) {\r\n                        //La carta se ha puesto con éxito\r\n                    } else {\r\n                        Toast.makeText(applicationContext, \"Quizás se haya caido el servidor\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            })*/\r\n    }\r\n\r\n    fun pasarTurno(@Suppress(\"UNUSED_PARAMETER\")view: View){\r\n        //Pedir pasarTurno al servidor\r\n        /*RetrofitClient.instance.userPlayCard(PutCardRequest(/*Que tengo que enviar*/))\r\n            .enqueue(object : Callback<PutCardResponse> {\r\n                override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {\r\n                    Toast.makeText(applicationContext, \"El servidor no responde\", Toast.LENGTH_LONG).show()\r\n                } override fun onResponse(call: Call<RegisterResponse>, response: Response<RegisterResponse>) {\r\n                    if (response.code() == 200) {\r\n                        //Se ha pasado el tuno con éxito\r\n                    } else {\r\n                        Toast.makeText(applicationContext, \"Quizás se haya caido el servidor\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            })*/\r\n    }\r\n\r\n    fun ponerCarta(@Suppress(\"UNUSED_PARAMETER\")view: View){\r\n\r\n        //Si es una +4 o un cambia color\r\n        if(nombreRecordado == \"mas_cuatro_base\" || nombreRecordado == \"cambio_color_base\") {\r\n            val builder = AlertDialog.Builder(this)\r\n            val items = arrayOf(\"Red\", \"Green\", \"Yellow\", \"Blue\")\r\n            with(builder)\r\n            {\r\n                setTitle(\"Elija un color\")\r\n                setItems(items) { _, which ->\r\n                    //Poner carta\r\n                    Toast.makeText(applicationContext, items[which] + \" is clicked\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                show()\r\n            }\r\n        }\r\n        //Mandar carta al servidor\r\n        /*RetrofitClient.instance.userPlayCard(PlayCardRequest(session, ))\r\n            .enqueue(object : Callback<TokenResponse> {\r\n                override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                    Toast.makeText(applicationContext, \"El servidor no responde\", Toast.LENGTH_LONG).show()\r\n                } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                    if (response.code() == 200) {\r\n                        Toast.makeText(applicationContext, \"Éxito\", Toast.LENGTH_LONG).show()\r\n                        session = response.body()!!.token\r\n                        //La carta se ha puesto con éxito\r\n                    } else {\r\n                        Toast.makeText(applicationContext, \"Quizás se haya caido el servidor\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            })*/\r\n    }\r\n\r\n\r\n    fun initRecycler(){\r\n        rvCard.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        val adapter = CardAdapter(cards)\r\n        rvCard.adapter = adapter\r\n    }\r\n\r\n    private fun actualizarJuego(){\r\n        anyadirCartas()\r\n        anyadirGamers()\r\n    }\r\n\r\n    var listaCartas = ArrayList<Card>()\r\n\r\n    private fun anyadirCartas(){\r\n        //Cards.removeAll(Cards)\r\n        var nCartas = 1\r\n        //Realizar consulta de las cartas al servidor\r\n        var i = 0\r\n        cards.add(Card(1, \"inicio\", R.drawable.inicio))\r\n        for(i in 1..nCartas) {\r\n            cards.add(Card(1, \"Carta +4\", R.drawable.cuatro_verde))\r\n        }\r\n        cards.add(Card(1, \"fin\", R.drawable.fin))\r\n\r\n        rvCard.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        val adapter = CardAdapter(cardsList)\r\n        rvCard.adapter = adapter\r\n    }\r\n\r\n    private fun anyadirGamers(){\r\n        //GamersList.removeAll(GamersList)\r\n        var nGamers = 1\r\n        //Realizar consulta de los otros juegadores al servidor\r\n        var i = 0\r\n        /*for(i in 1..nGamers) {\r\n            Gamers.add(Gamer(1, \"Carta +4\", R.drawable.cuatro_verde))\r\n        }*/\r\n        rvGamer.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        val adapter = GamerAdapter(gamersList)\r\n        rvGamer.adapter = adapter\r\n    }\r\n\r\n    private fun cambiarCima(){\r\n        image_cima.setImageResource(cimaActual)\r\n    }\r\n\r\n    private fun cambiarElegido(){\r\n        /*val imageView2 = findViewById<ImageView>(R.id.image_record)\r\n        Picasso.get().load(record).into(imageView2)*/\r\n        //imageView2.setImageResource(record)\r\n        recordCambiado = 0\r\n    }\r\n    //var recordCambiado = 0;\r\n    private fun actualizar(){\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            while(!finished){\r\n                if(myTurn) {\r\n                    RetrofitClient.instance.readGame(TokenRequest(session))\r\n                        .enqueue(object : Callback<GameInfoResponse> {\r\n                            override fun onFailure(call: Call<GameInfoResponse>, t: Throwable) {\r\n                                Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_LONG).show()\r\n                            } override fun onResponse(call: Call<GameInfoResponse>, response: Response<GameInfoResponse>) {\r\n                                if (response.code() == 200) {\r\n                                    Toast.makeText(applicationContext, \"Actualización\", Toast.LENGTH_LONG).show()\r\n                                    image_cima.setImageResource(traductorCartasToInt(response.body()!!.topDiscard))\r\n                                    /*** Players info ***/\r\n                                    if(response.body()!!.turn == 0) myTurn = true\r\n                                    else myTurn = false\r\n\r\n                                    for (i in 0..response.body()!!.maxPlayers) {\r\n                                        /*gamersList.add(Gamer(\r\n                                            response.body(),\r\n                                            \"Carta +4\",\r\n                                            R.drawable.cuatro_verde))*/\r\n                                    }\r\n                                    rvGamer.layoutManager = LinearLayoutManager(\r\n                                        this@TableroActivity,\r\n                                        LinearLayoutManager.HORIZONTAL,\r\n                                        false\r\n                                    )\r\n                                    val adapter = GamerAdapter(gamersList)\r\n                                    rvGamer.adapter = adapter\r\n                                    cimaActual = traductorCartasToInt(response.body()!!.topDiscard)\r\n                                    cimaCambiada =\r\n                                        cimaActual != traductorCartasToInt(response.body()!!.topDiscard)\r\n                                } else {\r\n                                    Toast.makeText(applicationContext, response.code(), Toast.LENGTH_LONG).show()\r\n                                }\r\n                            }\r\n                        })\r\n                    if (cimaCambiada) {\r\n                        cambiarCima()\r\n                        cimaCambiada = false\r\n                    }\r\n                    if (recordCambiado == 1) {\r\n                        cambiarElegido()\r\n                    }\r\n\r\n                    delay(200)\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private val PAUSE_ID = Menu.FIRST\r\n    private val EXIT_ID = Menu.FIRST + 1\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val result = super.onCreateOptionsMenu(menu)\r\n        menu.add(Menu.NONE, PAUSE_ID, Menu.NONE, \"Pausar Partida\")\r\n        menu.add(Menu.NONE, EXIT_ID, Menu.NONE, \"Salir de Partida\")\r\n        return result\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            PAUSE_ID -> {\r\n                return true\r\n            }\r\n            EXIT_ID -> {\r\n                RetrofitClient.instance.quitMatch(TokenRequest(session))\r\n                    .enqueue(object : Callback<TokenResponse> {\r\n                        override fun onFailure(call: Call<TokenResponse>, t: Throwable) {\r\n                            Toast.makeText(applicationContext, getString(R.string.no_response), Toast.LENGTH_LONG).show()\r\n                        } override fun onResponse(call: Call<TokenResponse>, response: Response<TokenResponse>) {\r\n                            if (response.code() == 200) {\r\n                                Toast.makeText(applicationContext, \"Ha salido de la partida\", Toast.LENGTH_LONG).show()\r\n                            } else {\r\n                                Toast.makeText(applicationContext, getString(R.string.bad_quit_response), Toast.LENGTH_LONG).show()\r\n                            }\r\n                        }\r\n                    })\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/eina/unizar/unozar/TableroActivity.kt	(revision 1ac70b4d628216e37c447a4d5cbc85509a51d107)
+++ app/src/main/java/eina/unizar/unozar/TableroActivity.kt	(date 1620543803600)
@@ -415,8 +415,7 @@
                                     Toast.makeText(applicationContext, "Actualización", Toast.LENGTH_LONG).show()
                                     image_cima.setImageResource(traductorCartasToInt(response.body()!!.topDiscard))
                                     /*** Players info ***/
-                                    if(response.body()!!.turn == 0) myTurn = true
-                                    else myTurn = false
+                                    myTurn = response.body()!!.turn == 0
 
                                     for (i in 0..response.body()!!.maxPlayers) {
                                         /*gamersList.add(Gamer(
